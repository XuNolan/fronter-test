# 2.18
修改此前逻辑，引入发送缓存。
此前，执行过程日志实时返回给客户端的工作，由收到执行用例请求的线程调用karate代码执行feature，并在其回调中调用发送接口返回。实时网络通信IO由执行karate feature的同一线程完成
引入缓存过程。执行karate代码的线程将要发送的信息和session写入缓冲，由线程池中线程循环获取并完成发送IO。
未来优化方向：
- 解决同一session集中出现和多线程向同一session发送信息的加锁开销；

理由有二：
1. karate核心模块不能与负责与网络客户端进行通信的web模块耦合。此前逻辑是，web调用feature模块开始执行的接口，feature又调用web模块的发送接口。导致两个模块相互依赖。新逻辑可以解耦两个模块。中间通过common模块的阻塞队列进行通信。
2. 减少与客户端通信的日志网络IO开销对karate脚本执行过程在时间上的影响。得到更准确的执行数据。（虽然当前性能要求不高）

# 1.26
1. 单一用例增删改查接口



# 1.25
1. 搭建数据库环境 [x]
2. 构造数据库模式 [x]
3. 定义前端界面原型 [x]
4. 初步定义后端交互接口
5. 对接数据库增删改查并实现功能

# 1.24
开始进行整体需求分析与前端外观分析。
前端拟采用amis低代码框架进行设计。

##  需求分析
当前暂定实现以下需求，之后的陆续新增

### 单一用例
[ ] 单一用例脚本增删改
[ ] 用例单元执行和结果实时展示
[ ] 用例执行结果录制存储

### 多用例
[ ] 多用例查找和勾选批量执行 -- 日志临时组
[ ] 多用例执行结果存储查看与分析
[ ] 多用例分组存储 --暂时不进行设计。

### 脚本
[ ] 自定义关键字与弹窗

### 未来拟新增的想法
- 关键参数占位符修改？
- 定时或周期性执行？
- 用例脚本与执行日志的历史记录存储和更新策略？

## 界面外观
- 单一用例详情、修改、存储与执行详情界面
- 用例管理与批量执行界面；
    - 查找界面勾选批量执行；执行过程自动跳转；

- 用例执行结果查找和管理。
- 与具体执行组执行记录详细信息和日志统计信息；
    - 批量执行后自动创建执行组，执行后录制信息在执行界面自行查看。录制组默认名为创建日期，点击批量执行后弹出窗口进行命名和执行配置及录制确认。

## 数据库设计
暂采用docker+mysql作为开发数据库环境。需持久化的数据包括：
- 用例详情；
- 脚本信息；记录历史版本信息。需要伪删除。
- 执行日志信息；（不确定需要哪些信息）

